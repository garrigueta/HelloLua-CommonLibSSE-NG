# Lua Module System for Skyrim SKSE

## Overview

This Skyrim Special Edition SKSE plugin implements a dynamic Lua function registration system that allows for flexible and extensible Lua scripting without modifying C++ code. Key features:

- **Dynamic Function Registration**: Register new Lua functions at runtime without modifying C++ code
- **Module System**: Organize functions into logical modules with metadata
- **Interoperability**: Lua scripts can use both native C++ functions and functions from other Lua modules
- **Auto-Loading**: Automatically loads Lua modules from designated directories
- **Easy Extensibility**: Add new functionality through Lua files without recompiling the plugin

## Features

- **Dynamic Module API**: Create, register and discover modules and functions at runtime
- **Function Metadata**: Register functions with descriptions for better documentation
- **Module Versioning**: Support for semantic versioning of modules
- **Lua-to-Lua Function Calls**: Modules can call functions from other modules
- **Native Function Access**: Lua scripts can access C++ functions registered with the system

## Requirements

- Skyrim Special Edition (supports both Anniversary Edition and pre-AE versions)
- [SKSE](https://skse.silverlock.org/)
- Visual Studio 2022 with C++20 support
- CMake 3.24 or higher

## Installation

1. Build the plugin using CMake
2. Copy the built DLL to your Skyrim `Data/SKSE/Plugins` folder
3. Create a `LuaModules` folder in `Data/SKSE/Plugins/`
4. Place your Lua modules in the `LuaModules` folder

## Creating Lua Modules

See the detailed documentation in [LuaModuleSystem.md](docs/LuaModuleSystem.md) and the example module in the [Scripts](Scripts/) directory.

Basic example:

```lua
-- Create a new module
ModuleAPI.createModule("MyModule", "1.0.0")

-- Define a function
local function SayHello(name)
    local PrintToConsole = ModuleAPI.getNativeFunction("PrintToConsole")
    PrintToConsole("Hello, " .. (name or "world") .. "!")
    return true
end

-- Register the function with the module system
ModuleAPI.registerFunction("MyModule", "SayHello", SayHello, 
    "Prints a greeting to the Skyrim console")

-- Return module table for use with require()
return {
    name = "MyModule",
    version = "1.0.0",
    SayHello = SayHello
}
```

## Using Modules

```lua
-- Load a module
local myModule = require("MyModule")

-- Call a function from the module
myModule.SayHello("Dragonborn")
```

## Native Functions

The following native C++ functions are available to Lua scripts:

- `Log`: Log a message to the SKSE log
- `PrintToConsole`: Print a message to the Skyrim console
- `GetPlayerPosition`: Get the player's current position

## License

MIT License
